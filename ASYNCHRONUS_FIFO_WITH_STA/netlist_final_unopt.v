/* Generated by Yosys 0.45+106 (git sha1 982fade0d, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module async_fifo(wclk, rclk, r_en, w_en, rrst_n, wrst_n, data_in, full, empty, data_out);
  input [7:0] data_in;
  wire [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out;
  output empty;
  wire empty;
  output full;
  wire full;
  wire [4:0] g_rptr;
  wire [4:0] g_wptr;
  input r_en;
  wire r_en;
  wire [3:0] raddr;
  input rclk;
  wire rclk;
  wire [4:0] rptr;
  input rrst_n;
  wire rrst_n;
  input w_en;
  wire w_en;
  wire [3:0] waddr;
  input wclk;
  wire wclk;
  wire [4:0] wptr;
  input wrst_n;
  wire wrst_n;
  fifo_memory fifomemory (
    .data_in(data_in),
    .data_out(data_out),
    .full(full),
    .raddr(raddr),
    .waddr(waddr),
    .wclk(wclk),
    .wclk_en(w_en)
  );
  rptr_handler rptrhandler (
    .empty(empty),
    .g_wptr(g_wptr),
    .r_en(r_en),
    .raddr(raddr),
    .rclk(rclk),
    .rptr(rptr),
    .rrst_n(rrst_n)
  );
  cdc syncA (
    .clk(wclk),
    .in(rptr),
    .qb2(g_rptr),
    .rst_n(wrst_n)
  );
  cdc syncB (
    .clk(rclk),
    .in(wptr),
    .qb2(g_wptr),
    .rst_n(rrst_n)
  );
  wptr_handler wrpthandler (
    .full(full),
    .g_rptr(g_rptr),
    .w_en(w_en),
    .waddr(waddr),
    .wclk(wclk),
    .wptr(wptr),
    .wrst_n(wrst_n)
  );
endmodule

module b2g(b, g);
  input [4:0] b;
  wire [4:0] b;
  output [4:0] g;
  wire [4:0] g;
  XOR2_X1 _0_ (
    .A(b[1]),
    .B(b[0]),
    .Z(g[0])
  );
  XOR2_X1 _1_ (
    .A(b[4]),
    .B(b[3]),
    .Z(g[3])
  );
  XOR2_X1 _2_ (
    .A(b[3]),
    .B(b[2]),
    .Z(g[2])
  );
  XOR2_X1 _3_ (
    .A(b[1]),
    .B(b[2]),
    .Z(g[1])
  );
  assign g[4] = b[4];
endmodule

module cdc(in, clk, rst_n, qb2);
  wire [4:0] _00_;
  wire [4:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  input clk;
  wire clk;
  input [4:0] in;
  wire [4:0] in;
  wire [4:0] qb1;
  output [4:0] qb2;
  wire [4:0] qb2;
  input rst_n;
  wire rst_n;
  AND2_X1 _12_ (
    .A1(in[3]),
    .A2(rst_n),
    .ZN(_00_[3])
  );
  AND2_X1 _13_ (
    .A1(rst_n),
    .A2(in[2]),
    .ZN(_00_[2])
  );
  AND2_X1 _14_ (
    .A1(rst_n),
    .A2(in[1]),
    .ZN(_00_[1])
  );
  AND2_X1 _15_ (
    .A1(rst_n),
    .A2(in[0]),
    .ZN(_00_[0])
  );
  AND2_X1 _16_ (
    .A1(rst_n),
    .A2(qb1[3]),
    .ZN(_01_[3])
  );
  AND2_X1 _17_ (
    .A1(rst_n),
    .A2(qb1[2]),
    .ZN(_01_[2])
  );
  AND2_X1 _18_ (
    .A1(rst_n),
    .A2(qb1[1]),
    .ZN(_01_[1])
  );
  AND2_X1 _19_ (
    .A1(rst_n),
    .A2(qb1[0]),
    .ZN(_01_[0])
  );
  AND2_X1 _20_ (
    .A1(rst_n),
    .A2(qb1[4]),
    .ZN(_01_[4])
  );
  AND2_X1 _21_ (
    .A1(rst_n),
    .A2(in[4]),
    .ZN(_00_[4])
  );
  DFF_X1 _22_ (
    .CK(clk),
    .D(_01_[0]),
    .Q(qb2[0]),
    .QN(_10_)
  );
  DFF_X1 _23_ (
    .CK(clk),
    .D(_01_[1]),
    .Q(qb2[1]),
    .QN(_09_)
  );
  DFF_X1 _24_ (
    .CK(clk),
    .D(_01_[2]),
    .Q(qb2[2]),
    .QN(_08_)
  );
  DFF_X1 _25_ (
    .CK(clk),
    .D(_01_[3]),
    .Q(qb2[3]),
    .QN(_07_)
  );
  DFF_X1 _26_ (
    .CK(clk),
    .D(_01_[4]),
    .Q(qb2[4]),
    .QN(_11_)
  );
  DFF_X1 _27_ (
    .CK(clk),
    .D(_00_[0]),
    .Q(qb1[0]),
    .QN(_06_)
  );
  DFF_X1 _28_ (
    .CK(clk),
    .D(_00_[1]),
    .Q(qb1[1]),
    .QN(_05_)
  );
  DFF_X1 _29_ (
    .CK(clk),
    .D(_00_[2]),
    .Q(qb1[2]),
    .QN(_04_)
  );
  DFF_X1 _30_ (
    .CK(clk),
    .D(_00_[3]),
    .Q(qb1[3]),
    .QN(_03_)
  );
  DFF_X1 _31_ (
    .CK(clk),
    .D(_00_[4]),
    .Q(qb1[4]),
    .QN(_02_)
  );
endmodule

module fifo_memory(wclk_en, full, wclk, data_in, raddr, waddr, data_out);
  wire [3:0] _00_;
  wire [7:0] _01_;
  wire [7:0] _02_;
  wire _03_;
  input [7:0] data_in;
  wire [7:0] data_in;
  output [7:0] data_out;
  wire [7:0] data_out;
  input full;
  wire full;
  input [3:0] raddr;
  wire [3:0] raddr;
  input [3:0] waddr;
  wire [3:0] waddr;
  input wclk;
  wire wclk;
  input wclk_en;
  wire wclk_en;
  reg [7:0] fifo [15:0];
  always @(posedge wclk) begin
    if (_02_[0])
      fifo[_00_][0:0] <= _01_[0];
    if (_02_[1])
      fifo[_00_][1:1] <= _01_[1];
    if (_02_[2])
      fifo[_00_][2:2] <= _01_[2];
    if (_02_[3])
      fifo[_00_][3:3] <= _01_[3];
    if (_02_[4])
      fifo[_00_][4:4] <= _01_[4];
    if (_02_[5])
      fifo[_00_][5:5] <= _01_[5];
    if (_02_[6])
      fifo[_00_][6:6] <= _01_[6];
    if (_02_[7])
      fifo[_00_][7:7] <= _01_[7];
  end
  assign data_out = fifo[raddr];
  INV_X1 _04_ (
    .A(full),
    .ZN(_03_)
  );
  AND2_X1 _05_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[6])
  );
  AND3_X1 _06_ (
    .A1(waddr[2]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_00_[2])
  );
  AND3_X1 _07_ (
    .A1(waddr[1]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_00_[1])
  );
  AND3_X1 _08_ (
    .A1(waddr[0]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_00_[0])
  );
  AND3_X1 _09_ (
    .A1(data_in[6]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[6])
  );
  AND3_X1 _10_ (
    .A1(data_in[5]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[5])
  );
  AND3_X1 _11_ (
    .A1(data_in[4]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[4])
  );
  AND3_X1 _12_ (
    .A1(data_in[3]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[3])
  );
  AND3_X1 _13_ (
    .A1(data_in[2]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[2])
  );
  AND3_X1 _14_ (
    .A1(data_in[1]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[1])
  );
  AND3_X1 _15_ (
    .A1(data_in[0]),
    .A2(wclk_en),
    .A3(_03_),
    .ZN(_01_[0])
  );
  AND3_X1 _16_ (
    .A1(wclk_en),
    .A2(_03_),
    .A3(data_in[7]),
    .ZN(_01_[7])
  );
  AND3_X1 _17_ (
    .A1(wclk_en),
    .A2(_03_),
    .A3(waddr[3]),
    .ZN(_00_[3])
  );
  AND2_X1 _18_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[5])
  );
  AND2_X1 _19_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[4])
  );
  AND2_X1 _20_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[3])
  );
  AND2_X1 _21_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[2])
  );
  AND2_X1 _22_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[1])
  );
  AND2_X1 _23_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[0])
  );
  AND2_X1 _24_ (
    .A1(wclk_en),
    .A2(_03_),
    .ZN(_02_[7])
  );
endmodule

module rptr_handler(g_wptr, rclk, rrst_n, r_en, raddr, rptr, empty);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  output empty;
  wire empty;
  wire [4:0] g_rptr_next;
  input [4:0] g_wptr;
  wire [4:0] g_wptr;
  input r_en;
  wire r_en;
  output [3:0] raddr;
  wire [3:0] raddr;
  wire [4:0] rbin;
  wire [4:0] rbin_next;
  input rclk;
  wire rclk;
  wire rempty;
  output [4:0] rptr;
  wire [4:0] rptr;
  input rrst_n;
  wire rrst_n;
  INV_X1 _25_ (
    .A(rbin[1]),
    .ZN(_06_)
  );
  INV_X1 _26_ (
    .A(g_rptr_next[3]),
    .ZN(_07_)
  );
  INV_X1 _27_ (
    .A(g_rptr_next[1]),
    .ZN(_08_)
  );
  INV_X1 _28_ (
    .A(g_wptr[0]),
    .ZN(_09_)
  );
  INV_X1 _29_ (
    .A(g_rptr_next[4]),
    .ZN(_10_)
  );
  NAND2_X1 _30_ (
    .A1(r_en),
    .A2(_05_),
    .ZN(_11_)
  );
  NAND3_X1 _31_ (
    .A1(rbin[0]),
    .A2(r_en),
    .A3(_05_),
    .ZN(_12_)
  );
  NOR2_X1 _32_ (
    .A1(_06_),
    .A2(_12_),
    .ZN(_13_)
  );
  NAND2_X1 _33_ (
    .A1(rbin[2]),
    .A2(_13_),
    .ZN(_14_)
  );
  XOR2_X1 _34_ (
    .A(rbin[2]),
    .B(_13_),
    .Z(rbin_next[2])
  );
  XNOR2_X1 _35_ (
    .A(rbin[1]),
    .B(_12_),
    .ZN(rbin_next[1])
  );
  XNOR2_X1 _36_ (
    .A(rbin[0]),
    .B(_11_),
    .ZN(rbin_next[0])
  );
  NAND3_X1 _37_ (
    .A1(rbin[3]),
    .A2(rbin[2]),
    .A3(_13_),
    .ZN(_15_)
  );
  XNOR2_X1 _38_ (
    .A(rbin[3]),
    .B(_14_),
    .ZN(rbin_next[3])
  );
  XNOR2_X1 _39_ (
    .A(rbin[4]),
    .B(_15_),
    .ZN(rbin_next[4])
  );
  OAI222_X1 _40_ (
    .A1(_07_),
    .A2(g_wptr[3]),
    .B1(_08_),
    .B2(g_wptr[1]),
    .C1(_10_),
    .C2(g_wptr[4]),
    .ZN(_16_)
  );
  AOI222_X1 _41_ (
    .A1(_07_),
    .A2(g_wptr[3]),
    .B1(_08_),
    .B2(g_wptr[1]),
    .C1(g_rptr_next[0]),
    .C2(_09_),
    .ZN(_17_)
  );
  XNOR2_X1 _42_ (
    .A(g_rptr_next[2]),
    .B(g_wptr[2]),
    .ZN(_18_)
  );
  OAI211_X1 _43_ (
    .A(_17_),
    .B(_18_),
    .C1(g_rptr_next[0]),
    .C2(_09_),
    .ZN(_19_)
  );
  AOI211_X1 _44_ (
    .A(_16_),
    .B(_19_),
    .C1(_10_),
    .C2(g_wptr[4]),
    .ZN(rempty)
  );
  DFFS_X1 _45_ (
    .CK(rclk),
    .D(rempty),
    .Q(empty),
    .QN(_05_),
    .SN(rrst_n)
  );
  DFFR_X1 _46_ (
    .CK(rclk),
    .D(g_rptr_next[0]),
    .Q(rptr[0]),
    .QN(_23_),
    .RN(rrst_n)
  );
  DFFR_X1 _47_ (
    .CK(rclk),
    .D(g_rptr_next[1]),
    .Q(rptr[1]),
    .QN(_22_),
    .RN(rrst_n)
  );
  DFFR_X1 _48_ (
    .CK(rclk),
    .D(g_rptr_next[2]),
    .Q(rptr[2]),
    .QN(_21_),
    .RN(rrst_n)
  );
  DFFR_X1 _49_ (
    .CK(rclk),
    .D(g_rptr_next[3]),
    .Q(rptr[3]),
    .QN(_20_),
    .RN(rrst_n)
  );
  DFFR_X1 _50_ (
    .CK(rclk),
    .D(g_rptr_next[4]),
    .Q(rptr[4]),
    .QN(_24_),
    .RN(rrst_n)
  );
  DFFR_X1 _51_ (
    .CK(rclk),
    .D(rbin_next[0]),
    .Q(rbin[0]),
    .QN(_04_),
    .RN(rrst_n)
  );
  DFFR_X1 _52_ (
    .CK(rclk),
    .D(rbin_next[1]),
    .Q(rbin[1]),
    .QN(_03_),
    .RN(rrst_n)
  );
  DFFR_X1 _53_ (
    .CK(rclk),
    .D(rbin_next[2]),
    .Q(rbin[2]),
    .QN(_02_),
    .RN(rrst_n)
  );
  DFFR_X1 _54_ (
    .CK(rclk),
    .D(rbin_next[3]),
    .Q(rbin[3]),
    .QN(_01_),
    .RN(rrst_n)
  );
  DFFR_X1 _55_ (
    .CK(rclk),
    .D(rbin_next[4]),
    .Q(rbin[4]),
    .QN(_00_),
    .RN(rrst_n)
  );
  b2g gray_converter2 (
    .b(rbin_next),
    .g(g_rptr_next)
  );
  assign raddr = rbin[3:0];
endmodule

module wptr_handler(waddr, wptr, g_rptr, full, wrst_n, wclk, w_en);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  output full;
  wire full;
  input [4:0] g_rptr;
  wire [4:0] g_rptr;
  wire [4:0] g_wptr_next;
  input w_en;
  wire w_en;
  output [3:0] waddr;
  wire [3:0] waddr;
  wire [4:0] wbin;
  wire [4:0] wbin_next;
  input wclk;
  wire wclk;
  wire wfull;
  output [4:0] wptr;
  wire [4:0] wptr;
  input wrst_n;
  wire wrst_n;
  INV_X1 _23_ (
    .A(wbin[1]),
    .ZN(_06_)
  );
  INV_X1 _24_ (
    .A(g_wptr_next[1]),
    .ZN(_07_)
  );
  INV_X1 _25_ (
    .A(g_rptr[0]),
    .ZN(_08_)
  );
  NAND2_X1 _26_ (
    .A1(w_en),
    .A2(_05_),
    .ZN(_09_)
  );
  NAND3_X1 _27_ (
    .A1(wbin[0]),
    .A2(w_en),
    .A3(_05_),
    .ZN(_10_)
  );
  NOR2_X1 _28_ (
    .A1(_06_),
    .A2(_10_),
    .ZN(_11_)
  );
  NAND2_X1 _29_ (
    .A1(wbin[2]),
    .A2(_11_),
    .ZN(_12_)
  );
  NAND3_X1 _30_ (
    .A1(wbin[2]),
    .A2(wbin[3]),
    .A3(_11_),
    .ZN(_13_)
  );
  XNOR2_X1 _31_ (
    .A(wbin[4]),
    .B(_13_),
    .ZN(wbin_next[4])
  );
  XNOR2_X1 _32_ (
    .A(wbin[3]),
    .B(_12_),
    .ZN(wbin_next[3])
  );
  XOR2_X1 _33_ (
    .A(wbin[2]),
    .B(_11_),
    .Z(wbin_next[2])
  );
  XNOR2_X1 _34_ (
    .A(wbin[1]),
    .B(_10_),
    .ZN(wbin_next[1])
  );
  XNOR2_X1 _35_ (
    .A(wbin[0]),
    .B(_09_),
    .ZN(wbin_next[0])
  );
  OAI222_X1 _36_ (
    .A1(_07_),
    .A2(g_rptr[1]),
    .B1(g_wptr_next[0]),
    .B2(_08_),
    .C1(g_wptr_next[4]),
    .C2(g_rptr[4]),
    .ZN(_14_)
  );
  AOI222_X1 _37_ (
    .A1(_07_),
    .A2(g_rptr[1]),
    .B1(g_wptr_next[0]),
    .B2(_08_),
    .C1(g_rptr[3]),
    .C2(g_wptr_next[3]),
    .ZN(_15_)
  );
  XNOR2_X1 _38_ (
    .A(g_wptr_next[2]),
    .B(g_rptr[2]),
    .ZN(_16_)
  );
  OAI211_X1 _39_ (
    .A(_15_),
    .B(_16_),
    .C1(g_wptr_next[3]),
    .C2(g_rptr[3]),
    .ZN(_17_)
  );
  AOI211_X1 _40_ (
    .A(_14_),
    .B(_17_),
    .C1(g_wptr_next[4]),
    .C2(g_rptr[4]),
    .ZN(wfull)
  );
  DFFR_X1 _41_ (
    .CK(wclk),
    .D(wfull),
    .Q(full),
    .QN(_05_),
    .RN(wrst_n)
  );
  DFFR_X1 _42_ (
    .CK(wclk),
    .D(g_wptr_next[0]),
    .Q(wptr[0]),
    .QN(_21_),
    .RN(wrst_n)
  );
  DFFR_X1 _43_ (
    .CK(wclk),
    .D(g_wptr_next[1]),
    .Q(wptr[1]),
    .QN(_20_),
    .RN(wrst_n)
  );
  DFFR_X1 _44_ (
    .CK(wclk),
    .D(g_wptr_next[2]),
    .Q(wptr[2]),
    .QN(_19_),
    .RN(wrst_n)
  );
  DFFR_X1 _45_ (
    .CK(wclk),
    .D(g_wptr_next[3]),
    .Q(wptr[3]),
    .QN(_18_),
    .RN(wrst_n)
  );
  DFFR_X1 _46_ (
    .CK(wclk),
    .D(g_wptr_next[4]),
    .Q(wptr[4]),
    .QN(_22_),
    .RN(wrst_n)
  );
  DFFR_X1 _47_ (
    .CK(wclk),
    .D(wbin_next[0]),
    .Q(wbin[0]),
    .QN(_04_),
    .RN(wrst_n)
  );
  DFFR_X1 _48_ (
    .CK(wclk),
    .D(wbin_next[1]),
    .Q(wbin[1]),
    .QN(_03_),
    .RN(wrst_n)
  );
  DFFR_X1 _49_ (
    .CK(wclk),
    .D(wbin_next[2]),
    .Q(wbin[2]),
    .QN(_02_),
    .RN(wrst_n)
  );
  DFFR_X1 _50_ (
    .CK(wclk),
    .D(wbin_next[3]),
    .Q(wbin[3]),
    .QN(_01_),
    .RN(wrst_n)
  );
  DFFR_X1 _51_ (
    .CK(wclk),
    .D(wbin_next[4]),
    .Q(wbin[4]),
    .QN(_00_),
    .RN(wrst_n)
  );
  b2g gray_converter1 (
    .b(wbin_next),
    .g(g_wptr_next)
  );
  assign waddr = wbin[3:0];
endmodule
