$date
	Sun Sep 29 19:24:40 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module csa_tb $end
$var wire 5 ! S [4:0] $end
$var wire 1 " COUT $end
$var reg 4 # A [3:0] $end
$var reg 4 $ B [3:0] $end
$var reg 4 % C1 [3:0] $end
$var integer 32 & i [31:0] $end
$scope module check $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 4 ) C [3:0] $end
$var wire 4 * s [3:0] $end
$var wire 3 + cint [2:0] $end
$var wire 4 , c [3:0] $end
$var wire 5 - S [4:0] $end
$var wire 1 " COUT $end
$var parameter 1 . c0 $end
$var parameter 1 / s0 $end
$scope module fa0 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 c $end
$var wire 1 3 sum $end
$var wire 1 4 carry $end
$upscope $end
$scope module fa1 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 7 c $end
$var wire 1 8 sum $end
$var wire 1 9 carry $end
$upscope $end
$scope module fa2 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 < c $end
$var wire 1 = sum $end
$var wire 1 > carry $end
$upscope $end
$scope module fa3 $end
$var wire 1 ? a $end
$var wire 1 @ b $end
$var wire 1 A c $end
$var wire 1 B sum $end
$var wire 1 C carry $end
$upscope $end
$scope module fa4 $end
$var wire 1 D a $end
$var wire 1 E b $end
$var wire 1 F c $end
$var wire 1 G sum $end
$var wire 1 H carry $end
$upscope $end
$scope module fa5 $end
$var wire 1 I a $end
$var wire 1 J b $end
$var wire 1 K c $end
$var wire 1 L sum $end
$var wire 1 M carry $end
$upscope $end
$scope module fa7 $end
$var wire 1 N a $end
$var wire 1 O b $end
$var wire 1 P c $end
$var wire 1 Q sum $end
$var wire 1 R carry $end
$upscope $end
$scope module fa8 $end
$var wire 1 S a $end
$var wire 1 T b $end
$var wire 1 U c $end
$var wire 1 V sum $end
$var wire 1 " carry $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
0/
0.
$end
#10
$dumpvars
0V
0U
0T
0S
0R
1Q
0P
0O
1N
0M
1L
0K
0J
1I
0H
1G
0F
1E
0D
0C
1B
1A
0@
0?
0>
1=
0<
0;
1:
09
08
07
06
05
14
03
12
11
00
b1110 -
b1 ,
b0 +
b1100 *
b1001 )
b1 (
b100 '
b1 &
b1001 %
b1 $
b100 #
0"
b1110 !
$end
#20
1K
b1 +
1V
b11101 !
b11101 -
0G
1H
1L
1O
1T
1D
0I
0N
b1101 ,
b11 *
1>
0B
1C
13
18
0=
1<
1;
1@
10
15
0:
b10 &
b1101 %
b1101 )
b1101 $
b1101 (
b11 #
b11 '
#30
1P
b11 +
1Q
0V
b1000 !
b1000 -
0L
1M
0O
0T
1I
b1 ,
b110 *
0>
03
0C
1=
0<
0A
01
16
0;
0@
05
1:
b11 &
b1 %
b1 )
b10 $
b10 (
b101 #
b101 '
#40
1"
1U
b0 !
b0 -
b111 +
0Q
1R
0V
1O
1T
b1101 ,
1C
1>
1<
1A
1;
1?
b100 &
b1101 %
b1101 )
b110 $
b110 (
b1101 #
b1101 '
#50
0P
0K
b10 !
b10 -
b100 +
1G
0H
0L
0M
0Q
0D
0I
1N
b1000 *
0=
08
1B
0<
06
1@
b101 &
b1001 %
b1001 )
b1100 $
b1100 (
#60
b10101 !
b10101 -
0G
1L
1V
0"
0E
1J
0T
b1001 *
b110 ,
19
0C
13
04
02
17
11
0@
00
15
0?
b110 &
b1010 %
b1010 )
b101 $
b101 (
b110 #
b110 '
#70
0V
0U
b0 +
b1110 !
b1110 -
1Q
0R
1G
0N
1E
b0 *
b111 ,
0B
03
14
0A
16
10
05
b111 &
b10 %
b10 )
b111 $
b111 (
b101 #
b101 '
#80
1V
b11111 !
b11111 -
0E
1T
1D
b1110 ,
b11 *
1C
13
04
18
1<
1A
01
0;
15
1?
b1000 &
b1110 %
b1110 )
b10 $
b10 (
b1111 #
b1111 '
#90
b11001 !
b11001 -
0L
0G
0J
0D
b1100 ,
b1 *
09
08
07
11
06
1;
00
05
0:
b1001 &
b1100 %
b1100 )
b101 $
b101 (
b1000 #
b1000 '
#100
b11111 !
b11111 -
1G
1L
1E
1I
b1101 ,
b101 *
14
1=
12
0A
1@
10
1:
b1010 &
b101 %
b101 )
b1101 $
b1101 (
b1101 #
b1101 '
#2100
