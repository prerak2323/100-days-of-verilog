/* Generated by Yosys 0.45+106 (git sha1 982fade0d, g++ 11.4.0-1ubuntu1~22.04 -fPIC -O3) */

module FullAdder(a, b, cin, sum, carry);
  input a;
  wire a;
  input b;
  wire b;
  output carry;
  wire carry;
  input cin;
  wire cin;
  wire ha1_carry;
  wire ha1_sum;
  wire ha2_carry;
  output sum;
  wire sum;
  sky130_fd_sc_hd__lpflow_inputiso1p_1 _0_ (
    .A(ha1_carry),
    .SLEEP(ha2_carry),
    .X(carry)
  );
  HalfAdder HA1 (
    .a(a),
    .b(b),
    .carry(ha1_carry),
    .sum(ha1_sum)
  );
  HalfAdder HA2 (
    .a(ha1_sum),
    .b(cin),
    .carry(ha2_carry),
    .sum(sum)
  );
endmodule

module HalfAdder(a, b, sum, carry);
  input a;
  wire a;
  input b;
  wire b;
  output carry;
  wire carry;
  output sum;
  wire sum;
  sky130_fd_sc_hd__and2_0 _0_ (
    .A(a),
    .B(b),
    .X(carry)
  );
  sky130_fd_sc_hd__xor2_1 _1_ (
    .A(a),
    .B(b),
    .X(sum)
  );
endmodule

module csa4(a, b, cin, sum, cout);
  wire _00_;
  wire _01_;
  wire _02_;
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  wire [3:0] carry;
  wire [3:0] carry0;
  wire [3:0] carry1;
  input cin;
  wire cin;
  output cout;
  wire cout;
  output [3:0] sum;
  wire [3:0] sum;
  wire [3:0] sum0;
  wire [3:0] sum1;
  sky130_fd_sc_hd__mux2_1 _03_ (
    .A0(sum0[0]),
    .A1(sum1[0]),
    .S(cin),
    .X(sum[0])
  );
  sky130_fd_sc_hd__mux2i_1 _04_ (
    .A0(carry0[0]),
    .A1(carry1[0]),
    .S(cin),
    .Y(_00_)
  );
  sky130_fd_sc_hd__mux2i_1 _05_ (
    .A0(carry1[1]),
    .A1(carry0[1]),
    .S(_00_),
    .Y(_01_)
  );
  sky130_fd_sc_hd__mux2i_1 _06_ (
    .A0(carry1[2]),
    .A1(carry0[2]),
    .S(_01_),
    .Y(_02_)
  );
  sky130_fd_sc_hd__mux2_1 _07_ (
    .A0(sum1[3]),
    .A1(sum0[3]),
    .S(_02_),
    .X(sum[3])
  );
  sky130_fd_sc_hd__mux2_1 _08_ (
    .A0(sum1[1]),
    .A1(sum0[1]),
    .S(_00_),
    .X(sum[1])
  );
  sky130_fd_sc_hd__mux2_1 _09_ (
    .A0(sum1[2]),
    .A1(sum0[2]),
    .S(_01_),
    .X(sum[2])
  );
  sky130_fd_sc_hd__mux2_1 _10_ (
    .A0(carry1[3]),
    .A1(carry0[3]),
    .S(_02_),
    .X(cout)
  );
  FullAdder FA1_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry1[0]),
    .cin(1'b1),
    .sum(sum1[0])
  );
  HalfAdder HA0_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry0[0]),
    .sum(sum0[0])
  );
  FullAdder \gen_csa[1].FA0  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry0[1]),
    .cin(1'b0),
    .sum(sum0[1])
  );
  FullAdder \gen_csa[1].FA1  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry1[1]),
    .cin(1'b1),
    .sum(sum1[1])
  );
  FullAdder \gen_csa[2].FA0  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry0[2]),
    .cin(1'b0),
    .sum(sum0[2])
  );
  FullAdder \gen_csa[2].FA1  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry1[2]),
    .cin(1'b1),
    .sum(sum1[2])
  );
  FullAdder \gen_csa[3].FA0  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry0[3]),
    .cin(1'b0),
    .sum(sum0[3])
  );
  FullAdder \gen_csa[3].FA1  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry1[3]),
    .cin(1'b1),
    .sum(sum1[3])
  );
  assign carry[3] = cout;
endmodule

module csa8(a, b, cin, sum, cout);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  wire [7:0] carry;
  wire [7:0] carry0;
  wire [7:0] carry1;
  input cin;
  wire cin;
  output cout;
  wire cout;
  output [7:0] sum;
  wire [7:0] sum;
  wire [7:0] sum0;
  wire [7:0] sum1;
  sky130_fd_sc_hd__mux2_1 _07_ (
    .A0(sum0[0]),
    .A1(sum1[0]),
    .S(cin),
    .X(sum[0])
  );
  sky130_fd_sc_hd__mux2i_1 _08_ (
    .A0(carry0[0]),
    .A1(carry1[0]),
    .S(cin),
    .Y(_00_)
  );
  sky130_fd_sc_hd__mux2_1 _09_ (
    .A0(sum1[1]),
    .A1(sum0[1]),
    .S(_00_),
    .X(sum[1])
  );
  sky130_fd_sc_hd__mux2i_1 _10_ (
    .A0(carry1[1]),
    .A1(carry0[1]),
    .S(_00_),
    .Y(_01_)
  );
  sky130_fd_sc_hd__mux2_1 _11_ (
    .A0(sum1[2]),
    .A1(sum0[2]),
    .S(_01_),
    .X(sum[2])
  );
  sky130_fd_sc_hd__mux2i_1 _12_ (
    .A0(carry1[2]),
    .A1(carry0[2]),
    .S(_01_),
    .Y(_02_)
  );
  sky130_fd_sc_hd__mux2_1 _13_ (
    .A0(sum1[3]),
    .A1(sum0[3]),
    .S(_02_),
    .X(sum[3])
  );
  sky130_fd_sc_hd__mux2i_1 _14_ (
    .A0(carry1[3]),
    .A1(carry0[3]),
    .S(_02_),
    .Y(_03_)
  );
  sky130_fd_sc_hd__mux2_1 _15_ (
    .A0(sum1[4]),
    .A1(sum0[4]),
    .S(_03_),
    .X(sum[4])
  );
  sky130_fd_sc_hd__mux2i_1 _16_ (
    .A0(carry1[4]),
    .A1(carry0[4]),
    .S(_03_),
    .Y(_04_)
  );
  sky130_fd_sc_hd__mux2_1 _17_ (
    .A0(sum1[5]),
    .A1(sum0[5]),
    .S(_04_),
    .X(sum[5])
  );
  sky130_fd_sc_hd__mux2i_1 _18_ (
    .A0(carry1[5]),
    .A1(carry0[5]),
    .S(_04_),
    .Y(_05_)
  );
  sky130_fd_sc_hd__mux2_1 _19_ (
    .A0(sum1[6]),
    .A1(sum0[6]),
    .S(_05_),
    .X(sum[6])
  );
  sky130_fd_sc_hd__mux2i_1 _20_ (
    .A0(carry1[6]),
    .A1(carry0[6]),
    .S(_05_),
    .Y(_06_)
  );
  sky130_fd_sc_hd__mux2_1 _21_ (
    .A0(sum1[7]),
    .A1(sum0[7]),
    .S(_06_),
    .X(sum[7])
  );
  sky130_fd_sc_hd__mux2_1 _22_ (
    .A0(carry1[7]),
    .A1(carry0[7]),
    .S(_06_),
    .X(cout)
  );
  FullAdder FA1_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry1[0]),
    .cin(1'b1),
    .sum(sum1[0])
  );
  HalfAdder HA0_0 (
    .a(a[0]),
    .b(b[0]),
    .carry(carry0[0]),
    .sum(sum0[0])
  );
  FullAdder \gen_csa[1].FA0  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry0[1]),
    .cin(1'b0),
    .sum(sum0[1])
  );
  FullAdder \gen_csa[1].FA1  (
    .a(a[1]),
    .b(b[1]),
    .carry(carry1[1]),
    .cin(1'b1),
    .sum(sum1[1])
  );
  FullAdder \gen_csa[2].FA0  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry0[2]),
    .cin(1'b0),
    .sum(sum0[2])
  );
  FullAdder \gen_csa[2].FA1  (
    .a(a[2]),
    .b(b[2]),
    .carry(carry1[2]),
    .cin(1'b1),
    .sum(sum1[2])
  );
  FullAdder \gen_csa[3].FA0  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry0[3]),
    .cin(1'b0),
    .sum(sum0[3])
  );
  FullAdder \gen_csa[3].FA1  (
    .a(a[3]),
    .b(b[3]),
    .carry(carry1[3]),
    .cin(1'b1),
    .sum(sum1[3])
  );
  FullAdder \gen_csa[4].FA0  (
    .a(a[4]),
    .b(b[4]),
    .carry(carry0[4]),
    .cin(1'b0),
    .sum(sum0[4])
  );
  FullAdder \gen_csa[4].FA1  (
    .a(a[4]),
    .b(b[4]),
    .carry(carry1[4]),
    .cin(1'b1),
    .sum(sum1[4])
  );
  FullAdder \gen_csa[5].FA0  (
    .a(a[5]),
    .b(b[5]),
    .carry(carry0[5]),
    .cin(1'b0),
    .sum(sum0[5])
  );
  FullAdder \gen_csa[5].FA1  (
    .a(a[5]),
    .b(b[5]),
    .carry(carry1[5]),
    .cin(1'b1),
    .sum(sum1[5])
  );
  FullAdder \gen_csa[6].FA0  (
    .a(a[6]),
    .b(b[6]),
    .carry(carry0[6]),
    .cin(1'b0),
    .sum(sum0[6])
  );
  FullAdder \gen_csa[6].FA1  (
    .a(a[6]),
    .b(b[6]),
    .carry(carry1[6]),
    .cin(1'b1),
    .sum(sum1[6])
  );
  FullAdder \gen_csa[7].FA0  (
    .a(a[7]),
    .b(b[7]),
    .carry(carry0[7]),
    .cin(1'b0),
    .sum(sum0[7])
  );
  FullAdder \gen_csa[7].FA1  (
    .a(a[7]),
    .b(b[7]),
    .carry(carry1[7]),
    .cin(1'b1),
    .sum(sum1[7])
  );
  assign carry[7] = cout;
endmodule

module vedic2x2(a, b, prod);
  input [1:0] a;
  wire [1:0] a;
  wire a0b0;
  wire a0b1;
  wire a1b0;
  wire a1b1;
  input [1:0] b;
  wire [1:0] b;
  wire carry;
  output [3:0] prod;
  wire [3:0] prod;
  sky130_fd_sc_hd__and2_0 _0_ (
    .A(a[1]),
    .B(b[1]),
    .X(a1b1)
  );
  sky130_fd_sc_hd__and2_0 _1_ (
    .A(b[1]),
    .B(a[0]),
    .X(a0b1)
  );
  sky130_fd_sc_hd__and2_0 _2_ (
    .A(a[1]),
    .B(b[0]),
    .X(a1b0)
  );
  sky130_fd_sc_hd__and2_0 _3_ (
    .A(a[0]),
    .B(b[0]),
    .X(prod[0])
  );
  HalfAdder HA0 (
    .a(a0b1),
    .b(a1b0),
    .carry(carry),
    .sum(prod[1])
  );
  HalfAdder HA1 (
    .a(a1b1),
    .b(carry),
    .carry(prod[3]),
    .sum(prod[2])
  );
  assign a0b0 = prod[0];
endmodule

module vedic4x4(a, b, prod, overflow);
  input [3:0] a;
  wire [3:0] a;
  input [3:0] b;
  wire [3:0] b;
  wire c1;
  wire c2;
  wire cnet;
  output overflow;
  wire overflow;
  output [7:0] prod;
  wire [7:0] prod;
  wire [3:0] prodm0;
  wire [3:0] prodm1;
  wire [3:0] prodm2;
  wire [3:0] prodm3;
  wire [3:0] sums1;
  wire [3:0] sums2;
  sky130_fd_sc_hd__lpflow_inputiso1p_1 _0_ (
    .A(c1),
    .SLEEP(c2),
    .X(cnet)
  );
  vedic2x2 M0 (
    .a(a[1:0]),
    .b(b[1:0]),
    .prod(prodm0)
  );
  vedic2x2 M1 (
    .a(a[1:0]),
    .b(b[3:2]),
    .prod(prodm1)
  );
  vedic2x2 M2 (
    .a(a[3:2]),
    .b(b[1:0]),
    .prod(prodm2)
  );
  vedic2x2 M3 (
    .a(a[3:2]),
    .b(b[3:2]),
    .prod(prodm3)
  );
  csa4 stage1 (
    .a(prodm1),
    .b(prodm2),
    .cin(1'b0),
    .cout(c1),
    .sum(sums1)
  );
  csa4 stage2 (
    .a({ 2'b00, prodm0[3:2] }),
    .b(sums1),
    .cin(1'b0),
    .cout(c2),
    .sum(sums2)
  );
  csa4 stage3 (
    .a({ 1'b0, cnet, sums2[3:2] }),
    .b(prodm3),
    .cin(1'b0),
    .cout(overflow),
    .sum(prod[7:4])
  );
  assign prod[3:0] = { sums2[1:0], prodm0[1:0] };
endmodule

module vedic8x8(a, b, prod, overflow);
  input [7:0] a;
  wire [7:0] a;
  input [7:0] b;
  wire [7:0] b;
  wire c1;
  wire c2;
  wire cnet;
  wire ov1;
  wire ov2;
  wire ov3;
  wire ov4;
  output overflow;
  wire overflow;
  output [15:0] prod;
  wire [15:0] prod;
  wire [7:0] prodm0;
  wire [7:0] prodm1;
  wire [7:0] prodm2;
  wire [7:0] prodm3;
  wire [7:0] sums1;
  wire [7:0] sums2;
  sky130_fd_sc_hd__lpflow_inputiso1p_1 _0_ (
    .A(c1),
    .SLEEP(c2),
    .X(cnet)
  );
  vedic4x4 M0 (
    .a(a[3:0]),
    .b(b[3:0]),
    .overflow(ov1),
    .prod(prodm0)
  );
  vedic4x4 M1 (
    .a(a[3:0]),
    .b(b[7:4]),
    .overflow(ov2),
    .prod(prodm1)
  );
  vedic4x4 M2 (
    .a(a[7:4]),
    .b(b[3:0]),
    .overflow(ov3),
    .prod(prodm2)
  );
  vedic4x4 M3 (
    .a(a[7:4]),
    .b(b[7:4]),
    .overflow(ov4),
    .prod(prodm3)
  );
  csa8 stage1 (
    .a(prodm1),
    .b(prodm2),
    .cin(1'b0),
    .cout(c1),
    .sum(sums1)
  );
  csa8 stage2 (
    .a({ 4'b0000, prodm0[7:4] }),
    .b(sums1),
    .cin(1'b0),
    .cout(c2),
    .sum(sums2)
  );
  csa8 stage3 (
    .a({ 3'b000, cnet, sums2[7:4] }),
    .b(prodm3),
    .cin(1'b0),
    .cout(overflow),
    .sum(prod[15:8])
  );
  assign prod[7:0] = { sums2[3:0], prodm0[3:0] };
endmodule
